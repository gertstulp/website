{
  "hash": "591f69a095d2bad927dba432ee719ea0",
  "result": {
    "markdown": "---\ntitle: \"converting rmd to quarto\"\nfreeze: true\n---\n\n\nI went from a Hugo-based website with the academic theme to a Quarto-website. This meant I had to slightly update the YAML-header in each .md file that I had for talks and for publications. Here I show how I did this. Not sure whether it is efficient, but it get's the job done. \n\n## Converting talks\n\nThe original files look something like this:\n\n\n::: {.cell}\n\n```{.html .cell-code}\n+++\ndate = \"2021-11-15T00:00:00\"\ntitle = \"A roadmap on how to be as open as possible, and as closed as necessary\"\nauthors = [\"Gert Stulp\"]\nabstract = \"During this event, we aimed at creating a roadmap that help researchers navigate GDPR and Open Science\"\nabstract_short = \"\"\nevent = \"Official Launch Groningen Digital Competence Center\"\nevent_url = \"https://www.rug.nl/digital-competence-centre/calendar/2021/gdcc-official-launch\"\nlocation = \"Groningen, the Netherlands\"\n\nselected = true\nmath = true\n\nurl_pdf = \"/pdf/2021_YAG_OSCG_DCC.pdf\"\nurl_slides = \"\"\nurl_video = \"\"\n\n\n# Optional featured image (relative to `static/img/` folder).\n[header]\nimage = \"\"\ncaption = \"\"\n\n+++\n```\n:::\n\n\nAnd need to be transformed to something like this:\n\n\n::: {.cell}\n\n```{.html .cell-code}\n---\ntitle: \"Template for event\"\ndescription: |\n  This is a template for an event I did. It was great! \ncategories:\n  - Talk\n  - Template\nauthor: \"Gert Stulp\"\ndate: \"2023-03-18\"\ntoc: true\nimage: ../../images/new_event.png\nimage-alt: New talk\nlanguage: \n    section-title-footnotes: References\n---\n\n\n## Summary \n<br>\n{{< fa podcast >}} &nbsp;&nbsp;&nbsp;&nbsp; Official Launch Groningen Digital Competence Center\n\n{{< fa map-marker >}} &nbsp;&nbsp;&nbsp;&nbsp; Groningen, the Netherlands\n\n{{< fa window-maximize >}} &nbsp;&nbsp;&nbsp;&nbsp; Click [here](https://www.rug.nl/digital-competence-centre/calendar/2021/gdcc-official-launch) for website\n\n{{< fa download >}} &nbsp;&nbsp;&nbsp;&nbsp; Download materials [here](\"/pdf/2021_YAG_OSCG_DCC.pdf\")\n\n## Description\n\nHere follows a description of the fantastic event.\n```\n:::\n\n\n## Read-in template\n\nI made a template that each talk should conform to and stored it into an .md file. This is the content of said file. The string `replace_title`, `replace_date`, `replace_category`, `replace_title_event`, `location_event`, `url_for_event`, `url_for_pdf`, and `description_text` need to be replaced by text that come from the original markdown-files that include Hugo code.\n\n::: {.cell}\n\n```{.html .cell-code}\n---\ntitle: replace_title\ndescription: |\n  description_text \ncategories:\n  - Talk\n  - replace_category\nauthor: \"Gert Stulp\"\ndate: insert_date\ntoc: true\nimage: ../../images/new_event.png\nimage-alt: New talk\nlanguage: \n    section-title-footnotes: References\n---\n\n\n## Summary \n<br>\n{{< fa podcast >}} &nbsp;&nbsp;&nbsp;&nbsp; replace_title_event\n\n{{< fa map-marker >}} &nbsp;&nbsp;&nbsp;&nbsp; location_event\n\n{{< fa window-maximize >}} &nbsp;&nbsp;&nbsp;&nbsp; Click [here](url_for_event) for website\n\n{{< fa download >}} &nbsp;&nbsp;&nbsp;&nbsp; Download materials [here](url_for_pdf)\n\n## Description\n\ndescription_text\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntemplate <- readLines(\"template_talk.md\")\n```\n:::\n\n\n## Read-in original files\n\n::: {.cell}\n\n```{.r .cell-code}\n# Directory path\ndirectory <- \"talk/\"\n\n# Extension to search for\nextension <- \".md\"\n\n# List files with the specified extension\nfile_list <- list.files(directory, pattern = paste0(\".*\", extension), full.names = TRUE)\n```\n:::\n\n\n\n## Replace text and store new files in new folder \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlines <- readLines(\"talk//2021_DGCC.md\")\n\n\n# Function to replace lines of text\nreplace_lines <- function(file_path, pattern, replacement) {\n  # Read the file\n  lines <- readLines(file_path)\n  \n  # Find lines matching the pattern\n  matching_lines <- grep(pattern, lines, ignore.case = TRUE)\n  \n  # Replace the matching lines\n  if (length(matching_lines) > 0) {\n    lines[matching_lines] <- str_replace(lines[matching_lines], pattern, replacement)\n    \n    # Write the updated lines back to the file\n    writeLines(lines, file_path)\n    cat(\"Replacement complete for\", file_path, \"\\n\")\n  } else {\n    cat(\"No matching lines found in\", file_path, \"\\n\")\n  }\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(stringr)\n\n# Function to replace lines of text\nreplace_lines <- function(file_path, pattern, replacement) {\n  # Read the file\n  lines <- readLines(file_path)\n  \n  # Find lines matching the pattern\n  matching_lines <- grep(pattern, lines, ignore.case = TRUE)\n  \n  # Replace the matching lines\n  if (length(matching_lines) > 0) {\n    lines[matching_lines] <- str_replace(lines[matching_lines], pattern, replacement)\n    \n    # Write the updated lines back to the file\n    writeLines(lines, file_path)\n    cat(\"Replacement complete for\", file_path, \"\\n\")\n  } else {\n    cat(\"No matching lines found in\", file_path, \"\\n\")\n  }\n}\n\n# List of Markdown files to process\nmarkdown_files <- c(\"file1.md\", \"file2.md\", \"file3.md\")\n\n# Iterate over each Markdown file\nfor (file in markdown_files) {\n  # Specify the pattern and replacement text\n  pattern <- \"old text\"\n  replacement <- \"new text\"\n  \n  # Replace lines of text in the current file\n  replace_lines(file, pattern, replacement)\n}\n```\n:::\n\n\n\nReading in multiple files\n\n::: {.cell}\n\n:::\n\n\n\n\n# Converting ",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}